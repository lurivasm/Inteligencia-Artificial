%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Ejercicio 1
% Duplica
% Recibe dos listas, y es true si los elementos de la primera 
% estan en la segunda duplicados
duplica([],[]).
duplica([X|L],[X, X|L1]) :- duplica(L, L1).

 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Ejercicio 2
% Invierte
% Recibe dos listas y se satisface cuando la segunda contiene los
% elementos de la primera en orden inverso
% Hacemos uso del predicado concatena
concatena([], L, L).
concatena([X|L1], L2, [X|L3]) :- concatena(L1, L2, L3).

invierte([], []).
invierte([H|T], L) :- invierte(T, R), concatena(R, [H], L).

 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Ejercicio 3
% Palíndromo
% Recibe una lista y se satisface cuando es un palindromo, es
% decir, se lee de la misma manera de izquierda a derecha que
% de derecha a izquierda
palindromo(L) :- invierte(L, L).

 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Ejercicio 4
% Divide
%  Recibe 4 argumentos:
%  		L : una lista de elementos
%  		N : un numero
%  		L1 : lista que debe contener los N primeros elem de L
%  		L2 : lista que contiene el resto de elem de L
% Se satisface cuando la lista L1 contiene los primeros N 
% elementos de L y L2 contiene el resto.
divide(L, N, L1, L2) :- length(L1, N), concatena(L1, L2, L).

 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Ejercicio 5
% Aplasta
% Recibe dos listas y se satisface cuando la segunda lista es 
% una versión aplastada de la primera
aplasta([], []) :- !.
aplasta([T|H], L1) :- is_list(T), aplasta(T, L2), 
    				  aplasta(H, L3), concatena(L2, L3, L1).

aplasta([T|H], [T|L]) :- \+ is_list(T), aplasta(H, L). 
 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Ejercicio 6
% Primos
% Recibe un número N y una lista L
% Se satisface cuando L contiene los factores primos de N
next_factor(_, 2, 3) :- !.
next_factor(N, F, NF) :-  F < N, NF is F + 2.

divisores(1, [], _) :- !.

% Si F es divisor de N, lo mete en L, y calcula los divisores
% de N/F
divisores(N, [F|L], F) :- 0 is mod(N, F),
    				  N2 is N/F, divisores(N2, L, F).

% Si F no es divisor de N, calcula el siguiente factor despues 
% de F (NF) y mira si es divisor de N
divisores(N, L, F) :- \+ 0 is mod(N, F), next_factor(N, F, NF),
    				  divisores(N, L, NF).

primos(N, L) :- divisores(N, L, 2). 


 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Ejercicio 7.1
% cod_primero(X, L, Lrem, Lfront)
% Recibe 

cod_primero(X, [], [],[X]).

cod_primero(X, [P|F], Lrem, [T|Lfront]) :- X == P,T is P,
    									cod_primero(X, F, Lrem, Lfront).
cod_primero(X, [P|F], Lrem, [T]) :- \+ X == P , Lrem = [P|F], T is X.



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Ejercicio 7.1
% cod_all(L, L1)
% Recibe 
% 
cod_all([],[]).
cod_all([P|L],[T|L1]) :- cod_primero(P, L, Lrem, Lfront), T = Lfront, cod_all(Lrem, L1).











 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Ejercicio 8
% cod_
% 
% 